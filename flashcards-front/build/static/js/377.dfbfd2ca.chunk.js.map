{"version":3,"file":"static/js/377.dfbfd2ca.chunk.js","mappings":"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","sources":["components/Card/Card.jsx","pages/CreateSet/CreateSet.js"],"sourcesContent":["import React from 'react';\nimport './Card.scss';\n\nexport default function Card({ index, question, answer, onChange, onRemove }) {\n    const handleInputChange = (field, value) => {\n        onChange(index, field, value);\n    };\n\n    return (\n        <div className=\"card\">\n            <div className=\"card__nav\">\n                <div className=\"card__index\">{index + 1}</div>\n                <button className=\"card__delete\" onClick={() => onRemove(index)} type=\"button\">\n                    <img src=\"/img/deleteCard.svg\" alt=\"Удалить карточку\"/>\n                </button>\n            </div>\n            <div className=\"card__content\">\n                <div className=\"card__input__wrapper\">\n                    <input\n                        maxLength={250}\n                        type=\"text\"\n                        className=\"card__question\"\n                        placeholder=\"_\"\n                        value={question}\n                        onChange={(e) => handleInputChange('question', e.target.value)}\n                        required\n                    />\n                    <div className=\"card__input__caption\">ТЕРМИН</div>\n                </div>\n                <div className=\"card__input__wrapper\">\n                    <input\n                        maxLength={250}\n                        type=\"text\"\n                        className=\"card__answer\"\n                        placeholder=\"_\"\n                        value={answer}\n                        onChange={(e) => handleInputChange('answer', e.target.value)}\n                        required\n                    />\n                    <div className=\"card__input__caption\">ОПРЕДЕЛЕНИЕ</div>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import React, {useEffect, useState} from 'react';\nimport Header from \"../../components/Header/header\";\nimport SideBar from \"../../components/SideBar/SideBar\";\nimport './CreateSet.scss'\nimport Card from \"../../components/Card/Card\";\nimport {getDeckById, rewordCards, saveDeck, updateDeck} from \"../../services/deck\";\nimport {useNavigate, useParams} from \"react-router-dom\";\nimport {createAI} from \"../../services/auth\";\n\nexport default function CreateSet() {\n    const { id } = useParams(); // getting id if editing\n    const [title, setTitle] = useState('');\n    const [cards, setCards] = useState([{ question: '', answer: '' }]);\n    const [isPublic, setIsPublic] = useState(false);\n    const [isEditMode, setIsEditMode] = useState(false);\n    const navigate = useNavigate();\n\n    const [ showPopUp, setShowPopUp ] = useState(false);\n    const [ aiText, setAiText ] = useState('');\n    const [ loading, setLoading ] = useState(false);\n    const [ isRewording, setIsRewording ] = useState(false);\n\n    const handleReword = async () => {\n        setIsRewording(true); // показываем \"ожидание\"\n        try {\n            const token = localStorage.getItem('jwtToken');\n            const response = await rewordCards(token, cards);\n\n            if (!response.ok) {\n                throw new Error(\"GigaChat вернул ошибку\");\n            }\n\n            const newCards = await response.json();\n            setCards(newCards); // обновляем карточки\n        } catch (err) {\n            alert(\"Ошибка при переформулировке\");\n            console.error(err);\n        } finally {\n            setIsRewording(false); // скрываем индикатор\n        }\n    };\n\n\n    const handleAI = async () => {\n        if (!aiText || aiText.length < 10) {\n            alert(\"Введите текст для анализа\");\n            return;\n        }\n\n        setLoading(true);\n        try {\n            const token = localStorage.getItem('jwtToken');\n            const response = await createAI(token, aiText);\n            const newCards = await response.json();\n\n            if (Array.isArray(newCards)) {\n                setCards((prev) => [...prev, ...newCards.map((c) => ({\n                    question: c.question,\n                    answer: c.answer\n                }))]);\n                setShowPopUp(false);\n                setAiText(\"\");\n            } else {\n                alert(\"(дебаг) Модель вернула неверный формат\");\n            }\n        } catch (err) {\n            alert(\"(дебаг) Ошибка при запросе к GigaChat\");\n            console.error(err);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        if (id) {\n            setIsEditMode(true);\n            getDeckById(id).then((deck) => {\n                setTitle(deck.title);\n                setIsPublic(deck.is_public);\n                const formattedCards = Object.entries(deck.cards).map(([q, a]) => ({\n                    question: q,\n                    answer: a\n                }));\n                setCards(formattedCards);\n            }).catch(() => {\n                alert(\"Не удалось загрузить набор\");\n            });\n        }\n    }, [id]);\n\n    const handleCardChange = (index, field, value) => {\n        const updated = [...cards];\n        updated[index][field] = value;\n        setCards(updated);\n    };\n\n    const addCard = () => {\n        setCards([...cards, {question: '', answer: ''}]);\n    };\n\n    const removeCard = (index) => {\n        const updated = cards.filter((_, i) => i !== index);\n        setCards(updated);\n    }\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n\n        const data = {\n            title,\n            is_public: isPublic,\n            cards: Object.fromEntries(cards.map(card => [card.question, card.answer]))\n        };\n\n        try {\n            if (isEditMode) {\n                await updateDeck(id, data);\n                alert(\"Набор обновлён!\");\n                navigate('/library');\n            } else {\n                await saveDeck(data);\n                alert(\"Набор создан!\");\n                setTitle('');\n                setCards([{ question: '', answer: '' }]);\n                navigate('/library');\n            }\n        } catch {\n            alert(\"Ошибка при сохранении\");\n        }\n    };\n\n    return (\n      <div className=\"createset\">\n          <Header />\n          <div className=\"createset__content\">\n              <SideBar />\n              <form className=\"createset__module\" onSubmit={handleSubmit}>\n                  <div className=\"module__header__row\">\n                      <div className=\"module__title\">\n                          Создать новый набор\n                      </div>\n                      <button className=\"module__create\" type=\"submit\">\n                          Сохранить\n                      </button>\n                  </div>\n                  <div className=\"module__info__column\">\n                      <input\n                          type=\"text\"\n                          maxLength={25}\n                          placeholder=\"Введите название...\"\n                          value={title}\n                          onChange={(e) => setTitle(e.target.value)}\n                          required\n                          className=\"module__info__input\"\n                      />\n\n                      <div className=\"module__info__row\">\n                          {/*<button id=\"btn-import\" className=\"module__info__btn\">*/}\n                          {/*    <img src=\"/img/import.svg\" alt=\"\"/>*/}\n                          {/*    Импортировать*/}\n                          {/*</button>*/}\n                          <button id=\"btn-aicreate\" className=\"module__info__btn\"\n                                  onClick={() => setShowPopUp(true)}>\n                              <img src=\"/img/aicreate.svg\" alt=\"\"/>\n                              Создать из конспектов\n                          </button>\n                          <button id=\"btn-reword\" className=\"module__info__btn\" onClick={handleReword}\n                                  disabled={isRewording}>\n                              <img src=\"/img/aicreate.svg\" alt=\"\"/>\n                              {isRewording ? \"Переформулируем...\" : \"Переформулировать вопросы\"}\n                          </button>\n                          <label className=\"module__info__checkbox\">\n                              <input\n                                  type=\"checkbox\"\n                                  checked={isPublic}\n                                  onChange={(e) => setIsPublic(e.target.checked)}\n                              />\n                              Сделать набор публичным\n                          </label>\n                      </div>\n                  </div>\n                  {showPopUp && (\n                      <div className=\"popup__overlay\">\n                          <div className=\"popup__window\">\n                              <div className=\"popup__title\">\n                                  Вставьте текст конспекта\n                              </div>\n                              <textarea\n                                  className=\"popup__textarea\"\n                                  maxLength={5000}\n                                  value={aiText}\n                                  onChange={(e) => setAiText(e.target.value)}\n                                  placeholder=\"Введите до 5000 символов...\"\n                                  rows={10}\n                                  style={{width: '100%'}}\n                              />\n                              <div className=\"popup__row\">\n                                  <button id=\"popup__create\" className=\"popup__btn\" onClick={handleAI} disabled={loading}>\n                                      {loading ? \"Генерация...\" : \"Создать на основе конспекта\"}\n                                  </button>\n                                  <button id=\"popup__cancel\" className=\"popup__btn\" onClick={() => setShowPopUp(false)}>\n                                      Отмена\n                                  </button>\n                              </div>\n                          </div>\n                      </div>\n                  )}\n                  {cards.map((card, index) => (\n                      <Card\n                          key={index}\n                          index={index}\n                          question={card.question}\n                          answer={card.answer}\n                          onChange={handleCardChange}\n                          onRemove={removeCard}\n                      />\n                  ))}\n                  <div className=\"createset__wrapper\">\n                      <button className=\"createset__addcard\" onClick={addCard}>\n                          ДОБАВИТЬ КАРТОЧКУ\n                      </button>\n                  </div>\n              </form>\n          </div>\n      </div>\n    );\n}"],"names":["Card","_ref","index","question","answer","onChange","onRemove","handleInputChange","field","value","_jsxs","className","children","_jsx","onClick","type","src","alt","maxLength","placeholder","e","target","required","CreateSet","id","useParams","title","setTitle","useState","cards","setCards","isPublic","setIsPublic","isEditMode","setIsEditMode","navigate","useNavigate","showPopUp","setShowPopUp","aiText","setAiText","loading","setLoading","isRewording","setIsRewording","useEffect","getDeckById","then","deck","is_public","formattedCards","Object","entries","map","q","a","catch","alert","handleCardChange","updated","removeCard","filter","_","i","Header","SideBar","onSubmit","async","preventDefault","data","fromEntries","card","updateDeck","saveDeck","token","localStorage","getItem","response","rewordCards","ok","Error","newCards","json","err","console","error","disabled","checked","rows","style","width","length","createAI","Array","isArray","prev","c","addCard"],"sourceRoot":""}